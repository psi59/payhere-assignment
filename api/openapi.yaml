openapi: 3.0.3
info:
  title: PayHere API Documentation
  description: PayHere API Documentation
  version: 1.0.0
servers:
  - url: 'http://localhost:1202'
tags:
  - name: user
    description: 회원
paths:
  /v1/users/signUp:
    post:
      tags:
        - user
      operationId: signUp
      summary: 회원 가입
      description: |
        회원 가입을 제공합니다.
        
        ### Error case
        
        - 잘못된 요청의 경우, `InvalidRequest (400)` 에러를 반환합니다.
        - 중복된 `phoneNumber`로 회원가입을 요청할 경우, `UserAlreadyExists (409)` 에러를 반환합니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - phoneNumber
                - password
              properties:
                name:
                  description: 회원명
                  type: string
                  example: "박상일"
                phoneNumber:
                  $ref: "#/components/schemas/PhoneNumber"
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        204:
          description: 회원 등록 성공
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
              examples:
                InvalidRequest:
                  $ref: "#/components/examples/InvalidRequest"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
              examples:
                UserAlreadyExists:
                  $ref: "#/components/examples/UserAlreadyExists"
        500:
          $ref: "#/components/responses/InternalServerError"
  /v1/users/signIn:
    post:
      tags:
        - user
      operationId: signIn
      summary: 로그인
      description: |
        로그인 기능을 제공하며 성공시 7일동안 유효한 JWT 토큰을 발급합니다.

        ### Error case

        - 잘못된 요청의 경우, `InvalidRequest (400)` 에러를 반환합니다.
        - 비밀번호가 틀렸을 경우, `PasswordMismatch (400)` 에러를 반환합니다.
        - 회원이 존재하지 않을 경우, `UserNotFound (404)` 에러를 반환합니다.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - phoneNumber
                - password
              properties:
                phoneNumber:
                  $ref: "#/components/schemas/PhoneNumber"
                password:
                  $ref: "#/components/schemas/Password"
      responses:
        204:
          description: 회원 등록 성공
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
              examples:
                InvalidRequest:
                  $ref: "#/components/examples/InvalidRequest"
                PasswordMismatch:
                  $ref: "#/components/examples/PasswordMismatch"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
              examples:
                UserNotFound:
                  $ref: "#/components/examples/UserNotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /v1/users/signOut:
    post:
      tags:
        - user
      operationId: signOut
      summary: 로그 아웃
      description: |
        로그아웃 기능을 제공합니다.
        
        만료되지 않은 토큰의 경우 `token_blacklist`에 등록합니다.

      security:
        - tokenAuth: []
      responses:
        204:
          description: 회원 등록 성공
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
              examples:
                InvalidRequest:
                  $ref: "#/components/examples/InvalidRequest"
                PasswordMismatch:
                  $ref: "#/components/examples/PasswordMismatch"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
              examples:
                UserNotFound:
                  $ref: "#/components/examples/UserNotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    tokenAuth:
      description: |
        토큰 인증,
        
        로그인 API를 통해 발급된 token을 전송합니다.
      type: http
      scheme: Bearer
  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Response"
          examples:
            UserAlreadyExists:
              $ref: "#/components/examples/InternalServerError"
  schemas:
    PhoneNumber:
      description: |
        휴대 전화 번호

        전화번호는 고유해야 하며 하이픈 없이 숫자로만 구성되어야 합니다.
      type: string
      uniqueItems: true
      example: "01043218765"
      pattern: '^01\d{8,9}$'
    Password:
      description: |
        비밀번호

        - 대문자를 반드시 1자이상 포함하여야 합니다.
        - 소문자를 반드시 1자이상 포함하여야 합니다.
        - 숫자를 반드시 1자 이상 포함하여야 합니다.
        - 특수문자를 반드시 1자 이상 포함하여야 합니다.
          - 공백을 포함한 허용된 특수문자는 다음과 같습니다. `!@#$%&*+-_=?:;,.|(){}<> `
      type: string
      example: Test1!
    Response:
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/ResponseMeta"
        data:
          type: object
          additionalProperties: true

    ResponseMeta:
      type: object
      properties:
        code:
          type: integer
          description: 응답 상태 코드
        message:
          type: string
          description: 응답 메시지

  examples:
    InternalServerError:
      value:
        meta:
          code: 500
          message: The server encountered an internal error. Please retry the request.
    InvalidRequest:
      value:
        meta:
          code: 400
          message: The request is not valid.
    PasswordMismatch:
      value:
        meta:
          code: 400
          message: Password does not match.
    UserNotFound:
      value:
        meta:
          code: 404
          message: The specified user doesn't exist.
    UserAlreadyExists:
      value:
        meta:
          code: 409
          message: The specified user already exists.
