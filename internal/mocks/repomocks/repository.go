// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface.go
//
// Generated by this command:
//
//	mockgen -source repository/interface.go -typed -destination internal/mocks/repomocks/repository.go -package repomocks
//

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/psi59/payhere-assignment/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(c context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(c, user any) *MockUserRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), c, user)
	return &MockUserRepositoryCreateCall{Call: call}
}

// MockUserRepositoryCreateCall wrap *gomock.Call
type MockUserRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockUserRepositoryCreateCall) Return(arg0 error) *MockUserRepositoryCreateCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockUserRepositoryCreateCall) Do(f func(context.Context, *domain.User) error) *MockUserRepositoryCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockUserRepositoryCreateCall) DoAndReturn(f func(context.Context, *domain.User) error) *MockUserRepositoryCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// GetByPhoneNumber mocks base method.
func (m *MockUserRepository) GetByPhoneNumber(c context.Context, phoneNumber string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", c, phoneNumber)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockUserRepositoryMockRecorder) GetByPhoneNumber(c, phoneNumber any) *MockUserRepositoryGetByPhoneNumberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockUserRepository)(nil).GetByPhoneNumber), c, phoneNumber)
	return &MockUserRepositoryGetByPhoneNumberCall{Call: call}
}

// MockUserRepositoryGetByPhoneNumberCall wrap *gomock.Call
type MockUserRepositoryGetByPhoneNumberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockUserRepositoryGetByPhoneNumberCall) Return(arg0 *domain.User, arg1 error) *MockUserRepositoryGetByPhoneNumberCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockUserRepositoryGetByPhoneNumberCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserRepositoryGetByPhoneNumberCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockUserRepositoryGetByPhoneNumberCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserRepositoryGetByPhoneNumberCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// MockTokenBlacklistRepository is a mock of TokenBlacklistRepository interface.
type MockTokenBlacklistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenBlacklistRepositoryMockRecorder
}

// MockTokenBlacklistRepositoryMockRecorder is the mock recorder for MockTokenBlacklistRepository.
type MockTokenBlacklistRepositoryMockRecorder struct {
	mock *MockTokenBlacklistRepository
}

// NewMockTokenBlacklistRepository creates a new mock instance.
func NewMockTokenBlacklistRepository(ctrl *gomock.Controller) *MockTokenBlacklistRepository {
	mock := &MockTokenBlacklistRepository{ctrl: ctrl}
	mock.recorder = &MockTokenBlacklistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenBlacklistRepository) EXPECT() *MockTokenBlacklistRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTokenBlacklistRepository) Create(c context.Context, token *domain.AuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTokenBlacklistRepositoryMockRecorder) Create(c, token any) *MockTokenBlacklistRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTokenBlacklistRepository)(nil).Create), c, token)
	return &MockTokenBlacklistRepositoryCreateCall{Call: call}
}

// MockTokenBlacklistRepositoryCreateCall wrap *gomock.Call
type MockTokenBlacklistRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockTokenBlacklistRepositoryCreateCall) Return(arg0 error) *MockTokenBlacklistRepositoryCreateCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockTokenBlacklistRepositoryCreateCall) Do(f func(context.Context, *domain.AuthToken) error) *MockTokenBlacklistRepositoryCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockTokenBlacklistRepositoryCreateCall) DoAndReturn(f func(context.Context, *domain.AuthToken) error) *MockTokenBlacklistRepositoryCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// IsExists mocks base method.
func (m *MockTokenBlacklistRepository) IsExists(c context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExists", c, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsExists indicates an expected call of IsExists.
func (mr *MockTokenBlacklistRepositoryMockRecorder) IsExists(c, token any) *MockTokenBlacklistRepositoryIsExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExists", reflect.TypeOf((*MockTokenBlacklistRepository)(nil).IsExists), c, token)
	return &MockTokenBlacklistRepositoryIsExistsCall{Call: call}
}

// MockTokenBlacklistRepositoryIsExistsCall wrap *gomock.Call
type MockTokenBlacklistRepositoryIsExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockTokenBlacklistRepositoryIsExistsCall) Return(arg0 bool, arg1 error) *MockTokenBlacklistRepositoryIsExistsCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockTokenBlacklistRepositoryIsExistsCall) Do(f func(context.Context, string) (bool, error)) *MockTokenBlacklistRepositoryIsExistsCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockTokenBlacklistRepositoryIsExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockTokenBlacklistRepositoryIsExistsCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
