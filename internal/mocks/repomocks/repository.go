// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface.go
//
// Generated by this command:
//
//	mockgen -source repository/interface.go -typed -destination internal/mocks/repomocks/repository.go -package repomocks
//

// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/psi59/payhere-assignment/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(c context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(c, user any) *MockUserRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), c, user)
	return &MockUserRepositoryCreateCall{Call: call}
}

// MockUserRepositoryCreateCall wrap *gomock.Call
type MockUserRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockUserRepositoryCreateCall) Return(arg0 error) *MockUserRepositoryCreateCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockUserRepositoryCreateCall) Do(f func(context.Context, *domain.User) error) *MockUserRepositoryCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockUserRepositoryCreateCall) DoAndReturn(f func(context.Context, *domain.User) error) *MockUserRepositoryCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Get mocks base method.
func (m *MockUserRepository) Get(c context.Context, userID int) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(c, userID any) *MockUserRepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), c, userID)
	return &MockUserRepositoryGetCall{Call: call}
}

// MockUserRepositoryGetCall wrap *gomock.Call
type MockUserRepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockUserRepositoryGetCall) Return(arg0 *domain.User, arg1 error) *MockUserRepositoryGetCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockUserRepositoryGetCall) Do(f func(context.Context, int) (*domain.User, error)) *MockUserRepositoryGetCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockUserRepositoryGetCall) DoAndReturn(f func(context.Context, int) (*domain.User, error)) *MockUserRepositoryGetCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// GetByPhoneNumber mocks base method.
func (m *MockUserRepository) GetByPhoneNumber(c context.Context, phoneNumber string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", c, phoneNumber)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockUserRepositoryMockRecorder) GetByPhoneNumber(c, phoneNumber any) *MockUserRepositoryGetByPhoneNumberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockUserRepository)(nil).GetByPhoneNumber), c, phoneNumber)
	return &MockUserRepositoryGetByPhoneNumberCall{Call: call}
}

// MockUserRepositoryGetByPhoneNumberCall wrap *gomock.Call
type MockUserRepositoryGetByPhoneNumberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockUserRepositoryGetByPhoneNumberCall) Return(arg0 *domain.User, arg1 error) *MockUserRepositoryGetByPhoneNumberCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockUserRepositoryGetByPhoneNumberCall) Do(f func(context.Context, string) (*domain.User, error)) *MockUserRepositoryGetByPhoneNumberCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockUserRepositoryGetByPhoneNumberCall) DoAndReturn(f func(context.Context, string) (*domain.User, error)) *MockUserRepositoryGetByPhoneNumberCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// MockTokenBlacklistRepository is a mock of TokenBlacklistRepository interface.
type MockTokenBlacklistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenBlacklistRepositoryMockRecorder
}

// MockTokenBlacklistRepositoryMockRecorder is the mock recorder for MockTokenBlacklistRepository.
type MockTokenBlacklistRepositoryMockRecorder struct {
	mock *MockTokenBlacklistRepository
}

// NewMockTokenBlacklistRepository creates a new mock instance.
func NewMockTokenBlacklistRepository(ctrl *gomock.Controller) *MockTokenBlacklistRepository {
	mock := &MockTokenBlacklistRepository{ctrl: ctrl}
	mock.recorder = &MockTokenBlacklistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenBlacklistRepository) EXPECT() *MockTokenBlacklistRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTokenBlacklistRepository) Create(c context.Context, token *domain.AuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTokenBlacklistRepositoryMockRecorder) Create(c, token any) *MockTokenBlacklistRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTokenBlacklistRepository)(nil).Create), c, token)
	return &MockTokenBlacklistRepositoryCreateCall{Call: call}
}

// MockTokenBlacklistRepositoryCreateCall wrap *gomock.Call
type MockTokenBlacklistRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockTokenBlacklistRepositoryCreateCall) Return(arg0 error) *MockTokenBlacklistRepositoryCreateCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockTokenBlacklistRepositoryCreateCall) Do(f func(context.Context, *domain.AuthToken) error) *MockTokenBlacklistRepositoryCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockTokenBlacklistRepositoryCreateCall) DoAndReturn(f func(context.Context, *domain.AuthToken) error) *MockTokenBlacklistRepositoryCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Get mocks base method.
func (m *MockTokenBlacklistRepository) Get(c context.Context, token string) (*domain.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, token)
	ret0, _ := ret[0].(*domain.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenBlacklistRepositoryMockRecorder) Get(c, token any) *MockTokenBlacklistRepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenBlacklistRepository)(nil).Get), c, token)
	return &MockTokenBlacklistRepositoryGetCall{Call: call}
}

// MockTokenBlacklistRepositoryGetCall wrap *gomock.Call
type MockTokenBlacklistRepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockTokenBlacklistRepositoryGetCall) Return(arg0 *domain.AuthToken, arg1 error) *MockTokenBlacklistRepositoryGetCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockTokenBlacklistRepositoryGetCall) Do(f func(context.Context, string) (*domain.AuthToken, error)) *MockTokenBlacklistRepositoryGetCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockTokenBlacklistRepositoryGetCall) DoAndReturn(f func(context.Context, string) (*domain.AuthToken, error)) *MockTokenBlacklistRepositoryGetCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemRepository) Create(c context.Context, item *domain.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockItemRepositoryMockRecorder) Create(c, item any) *MockItemRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemRepository)(nil).Create), c, item)
	return &MockItemRepositoryCreateCall{Call: call}
}

// MockItemRepositoryCreateCall wrap *gomock.Call
type MockItemRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockItemRepositoryCreateCall) Return(arg0 error) *MockItemRepositoryCreateCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockItemRepositoryCreateCall) Do(f func(context.Context, *domain.Item) error) *MockItemRepositoryCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockItemRepositoryCreateCall) DoAndReturn(f func(context.Context, *domain.Item) error) *MockItemRepositoryCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Delete mocks base method.
func (m *MockItemRepository) Delete(c context.Context, userID, itemID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, userID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemRepositoryMockRecorder) Delete(c, userID, itemID any) *MockItemRepositoryDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemRepository)(nil).Delete), c, userID, itemID)
	return &MockItemRepositoryDeleteCall{Call: call}
}

// MockItemRepositoryDeleteCall wrap *gomock.Call
type MockItemRepositoryDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockItemRepositoryDeleteCall) Return(arg0 error) *MockItemRepositoryDeleteCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockItemRepositoryDeleteCall) Do(f func(context.Context, int, int) error) *MockItemRepositoryDeleteCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockItemRepositoryDeleteCall) DoAndReturn(f func(context.Context, int, int) error) *MockItemRepositoryDeleteCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Get mocks base method.
func (m *MockItemRepository) Get(c context.Context, userID, itemID int) (*domain.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, userID, itemID)
	ret0, _ := ret[0].(*domain.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockItemRepositoryMockRecorder) Get(c, userID, itemID any) *MockItemRepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItemRepository)(nil).Get), c, userID, itemID)
	return &MockItemRepositoryGetCall{Call: call}
}

// MockItemRepositoryGetCall wrap *gomock.Call
type MockItemRepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockItemRepositoryGetCall) Return(arg0 *domain.Item, arg1 error) *MockItemRepositoryGetCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockItemRepositoryGetCall) Do(f func(context.Context, int, int) (*domain.Item, error)) *MockItemRepositoryGetCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockItemRepositoryGetCall) DoAndReturn(f func(context.Context, int, int) (*domain.Item, error)) *MockItemRepositoryGetCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
