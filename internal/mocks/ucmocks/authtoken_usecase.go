// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/authtoken/interface.go
//
// Generated by this command:
//
//	mockgen -source usecase/authtoken/interface.go -typed -destination internal/mocks/ucmocks/authtoken_usecase.go -mock_names=Usecase=MockAuthTokenUsecase -package ucmocks
//

// Package ucmocks is a generated GoMock package.
package ucmocks

import (
	context "context"
	reflect "reflect"

	authtoken "github.com/psi59/payhere-assignment/usecase/authtoken"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthTokenUsecase is a mock of Usecase interface.
type MockAuthTokenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTokenUsecaseMockRecorder
}

// MockAuthTokenUsecaseMockRecorder is the mock recorder for MockAuthTokenUsecase.
type MockAuthTokenUsecaseMockRecorder struct {
	mock *MockAuthTokenUsecase
}

// NewMockAuthTokenUsecase creates a new mock instance.
func NewMockAuthTokenUsecase(ctrl *gomock.Controller) *MockAuthTokenUsecase {
	mock := &MockAuthTokenUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthTokenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthTokenUsecase) EXPECT() *MockAuthTokenUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthTokenUsecase) Create(c context.Context, input *authtoken.CreateInput) (*authtoken.CreateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, input)
	ret0, _ := ret[0].(*authtoken.CreateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthTokenUsecaseMockRecorder) Create(c, input any) *MockAuthTokenUsecaseCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthTokenUsecase)(nil).Create), c, input)
	return &MockAuthTokenUsecaseCreateCall{Call: call}
}

// MockAuthTokenUsecaseCreateCall wrap *gomock.Call
type MockAuthTokenUsecaseCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockAuthTokenUsecaseCreateCall) Return(arg0 *authtoken.CreateOutput, arg1 error) *MockAuthTokenUsecaseCreateCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockAuthTokenUsecaseCreateCall) Do(f func(context.Context, *authtoken.CreateInput) (*authtoken.CreateOutput, error)) *MockAuthTokenUsecaseCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockAuthTokenUsecaseCreateCall) DoAndReturn(f func(context.Context, *authtoken.CreateInput) (*authtoken.CreateOutput, error)) *MockAuthTokenUsecaseCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// GetBlacklist mocks base method.
func (m *MockAuthTokenUsecase) GetBlacklist(c context.Context, input *authtoken.GetBlacklistInput) (*authtoken.GetBlacklistOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklist", c, input)
	ret0, _ := ret[0].(*authtoken.GetBlacklistOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlacklist indicates an expected call of GetBlacklist.
func (mr *MockAuthTokenUsecaseMockRecorder) GetBlacklist(c, input any) *MockAuthTokenUsecaseGetBlacklistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklist", reflect.TypeOf((*MockAuthTokenUsecase)(nil).GetBlacklist), c, input)
	return &MockAuthTokenUsecaseGetBlacklistCall{Call: call}
}

// MockAuthTokenUsecaseGetBlacklistCall wrap *gomock.Call
type MockAuthTokenUsecaseGetBlacklistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockAuthTokenUsecaseGetBlacklistCall) Return(arg0 *authtoken.GetBlacklistOutput, arg1 error) *MockAuthTokenUsecaseGetBlacklistCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockAuthTokenUsecaseGetBlacklistCall) Do(f func(context.Context, *authtoken.GetBlacklistInput) (*authtoken.GetBlacklistOutput, error)) *MockAuthTokenUsecaseGetBlacklistCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockAuthTokenUsecaseGetBlacklistCall) DoAndReturn(f func(context.Context, *authtoken.GetBlacklistInput) (*authtoken.GetBlacklistOutput, error)) *MockAuthTokenUsecaseGetBlacklistCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// RegisterBlacklist mocks base method.
func (m *MockAuthTokenUsecase) RegisterBlacklist(c context.Context, input *authtoken.RegisterBlacklistInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterBlacklist", c, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterBlacklist indicates an expected call of RegisterBlacklist.
func (mr *MockAuthTokenUsecaseMockRecorder) RegisterBlacklist(c, input any) *MockAuthTokenUsecaseRegisterBlacklistCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBlacklist", reflect.TypeOf((*MockAuthTokenUsecase)(nil).RegisterBlacklist), c, input)
	return &MockAuthTokenUsecaseRegisterBlacklistCall{Call: call}
}

// MockAuthTokenUsecaseRegisterBlacklistCall wrap *gomock.Call
type MockAuthTokenUsecaseRegisterBlacklistCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockAuthTokenUsecaseRegisterBlacklistCall) Return(arg0 error) *MockAuthTokenUsecaseRegisterBlacklistCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockAuthTokenUsecaseRegisterBlacklistCall) Do(f func(context.Context, *authtoken.RegisterBlacklistInput) error) *MockAuthTokenUsecaseRegisterBlacklistCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockAuthTokenUsecaseRegisterBlacklistCall) DoAndReturn(f func(context.Context, *authtoken.RegisterBlacklistInput) error) *MockAuthTokenUsecaseRegisterBlacklistCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Verify mocks base method.
func (m *MockAuthTokenUsecase) Verify(c context.Context, input *authtoken.VerifyInput) (*authtoken.VerifyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", c, input)
	ret0, _ := ret[0].(*authtoken.VerifyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthTokenUsecaseMockRecorder) Verify(c, input any) *MockAuthTokenUsecaseVerifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthTokenUsecase)(nil).Verify), c, input)
	return &MockAuthTokenUsecaseVerifyCall{Call: call}
}

// MockAuthTokenUsecaseVerifyCall wrap *gomock.Call
type MockAuthTokenUsecaseVerifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockAuthTokenUsecaseVerifyCall) Return(arg0 *authtoken.VerifyOutput, arg1 error) *MockAuthTokenUsecaseVerifyCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockAuthTokenUsecaseVerifyCall) Do(f func(context.Context, *authtoken.VerifyInput) (*authtoken.VerifyOutput, error)) *MockAuthTokenUsecaseVerifyCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockAuthTokenUsecaseVerifyCall) DoAndReturn(f func(context.Context, *authtoken.VerifyInput) (*authtoken.VerifyOutput, error)) *MockAuthTokenUsecaseVerifyCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
