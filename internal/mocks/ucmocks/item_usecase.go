// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/item/interface.go
//
// Generated by this command:
//
//	mockgen -source usecase/item/interface.go -typed -destination internal/mocks/ucmocks/item_usecase.go -mock_names=Usecase=MockItemTokenUsecase -package ucmocks
//

// Package ucmocks is a generated GoMock package.
package ucmocks

import (
	context "context"
	reflect "reflect"

	item "github.com/psi59/payhere-assignment/usecase/item"
	gomock "go.uber.org/mock/gomock"
)

// MockItemTokenUsecase is a mock of Usecase interface.
type MockItemTokenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockItemTokenUsecaseMockRecorder
}

// MockItemTokenUsecaseMockRecorder is the mock recorder for MockItemTokenUsecase.
type MockItemTokenUsecaseMockRecorder struct {
	mock *MockItemTokenUsecase
}

// NewMockItemTokenUsecase creates a new mock instance.
func NewMockItemTokenUsecase(ctrl *gomock.Controller) *MockItemTokenUsecase {
	mock := &MockItemTokenUsecase{ctrl: ctrl}
	mock.recorder = &MockItemTokenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemTokenUsecase) EXPECT() *MockItemTokenUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemTokenUsecase) Create(c context.Context, input *item.CreateInput) (*item.CreateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, input)
	ret0, _ := ret[0].(*item.CreateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemTokenUsecaseMockRecorder) Create(c, input any) *MockItemTokenUsecaseCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemTokenUsecase)(nil).Create), c, input)
	return &MockItemTokenUsecaseCreateCall{Call: call}
}

// MockItemTokenUsecaseCreateCall wrap *gomock.Call
type MockItemTokenUsecaseCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockItemTokenUsecaseCreateCall) Return(arg0 *item.CreateOutput, arg1 error) *MockItemTokenUsecaseCreateCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockItemTokenUsecaseCreateCall) Do(f func(context.Context, *item.CreateInput) (*item.CreateOutput, error)) *MockItemTokenUsecaseCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockItemTokenUsecaseCreateCall) DoAndReturn(f func(context.Context, *item.CreateInput) (*item.CreateOutput, error)) *MockItemTokenUsecaseCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Delete mocks base method.
func (m *MockItemTokenUsecase) Delete(c context.Context, input *item.DeleteInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemTokenUsecaseMockRecorder) Delete(c, input any) *MockItemTokenUsecaseDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemTokenUsecase)(nil).Delete), c, input)
	return &MockItemTokenUsecaseDeleteCall{Call: call}
}

// MockItemTokenUsecaseDeleteCall wrap *gomock.Call
type MockItemTokenUsecaseDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockItemTokenUsecaseDeleteCall) Return(arg0 error) *MockItemTokenUsecaseDeleteCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockItemTokenUsecaseDeleteCall) Do(f func(context.Context, *item.DeleteInput) error) *MockItemTokenUsecaseDeleteCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockItemTokenUsecaseDeleteCall) DoAndReturn(f func(context.Context, *item.DeleteInput) error) *MockItemTokenUsecaseDeleteCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Find mocks base method.
func (m *MockItemTokenUsecase) Find(c context.Context, input *item.FindInput) (*item.FindOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", c, input)
	ret0, _ := ret[0].(*item.FindOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockItemTokenUsecaseMockRecorder) Find(c, input any) *MockItemTokenUsecaseFindCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockItemTokenUsecase)(nil).Find), c, input)
	return &MockItemTokenUsecaseFindCall{Call: call}
}

// MockItemTokenUsecaseFindCall wrap *gomock.Call
type MockItemTokenUsecaseFindCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockItemTokenUsecaseFindCall) Return(arg0 *item.FindOutput, arg1 error) *MockItemTokenUsecaseFindCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockItemTokenUsecaseFindCall) Do(f func(context.Context, *item.FindInput) (*item.FindOutput, error)) *MockItemTokenUsecaseFindCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockItemTokenUsecaseFindCall) DoAndReturn(f func(context.Context, *item.FindInput) (*item.FindOutput, error)) *MockItemTokenUsecaseFindCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Get mocks base method.
func (m *MockItemTokenUsecase) Get(c context.Context, input *item.GetInput) (*item.GetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, input)
	ret0, _ := ret[0].(*item.GetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockItemTokenUsecaseMockRecorder) Get(c, input any) *MockItemTokenUsecaseGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItemTokenUsecase)(nil).Get), c, input)
	return &MockItemTokenUsecaseGetCall{Call: call}
}

// MockItemTokenUsecaseGetCall wrap *gomock.Call
type MockItemTokenUsecaseGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockItemTokenUsecaseGetCall) Return(arg0 *item.GetOutput, arg1 error) *MockItemTokenUsecaseGetCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockItemTokenUsecaseGetCall) Do(f func(context.Context, *item.GetInput) (*item.GetOutput, error)) *MockItemTokenUsecaseGetCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockItemTokenUsecaseGetCall) DoAndReturn(f func(context.Context, *item.GetInput) (*item.GetOutput, error)) *MockItemTokenUsecaseGetCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Update mocks base method.
func (m *MockItemTokenUsecase) Update(c context.Context, input *item.UpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemTokenUsecaseMockRecorder) Update(c, input any) *MockItemTokenUsecaseUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemTokenUsecase)(nil).Update), c, input)
	return &MockItemTokenUsecaseUpdateCall{Call: call}
}

// MockItemTokenUsecaseUpdateCall wrap *gomock.Call
type MockItemTokenUsecaseUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockItemTokenUsecaseUpdateCall) Return(arg0 error) *MockItemTokenUsecaseUpdateCall {
	c_2.Call = c_2.Call.Return(arg0)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockItemTokenUsecaseUpdateCall) Do(f func(context.Context, *item.UpdateInput) error) *MockItemTokenUsecaseUpdateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockItemTokenUsecaseUpdateCall) DoAndReturn(f func(context.Context, *item.UpdateInput) error) *MockItemTokenUsecaseUpdateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
