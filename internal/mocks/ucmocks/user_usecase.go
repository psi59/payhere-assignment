// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/user/interface.go
//
// Generated by this command:
//
//	mockgen -source usecase/user/interface.go -typed -destination internal/mocks/ucmocks/user_usecase.go -mock_names=Usecase=MockUserUsecase -package ucmocks
//

// Package ucmocks is a generated GoMock package.
package ucmocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/psi59/payhere-assignment/domain"
	user "github.com/psi59/payhere-assignment/usecase/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserUsecase is a mock of Usecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserUsecase) Create(c context.Context, input *user.CreateInput) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, input)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserUsecaseMockRecorder) Create(c, input any) *MockUserUsecaseCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUsecase)(nil).Create), c, input)
	return &MockUserUsecaseCreateCall{Call: call}
}

// MockUserUsecaseCreateCall wrap *gomock.Call
type MockUserUsecaseCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockUserUsecaseCreateCall) Return(arg0 *domain.User, arg1 error) *MockUserUsecaseCreateCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockUserUsecaseCreateCall) Do(f func(context.Context, *user.CreateInput) (*domain.User, error)) *MockUserUsecaseCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockUserUsecaseCreateCall) DoAndReturn(f func(context.Context, *user.CreateInput) (*domain.User, error)) *MockUserUsecaseCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// GetByPhoneNumber mocks base method.
func (m *MockUserUsecase) GetByPhoneNumber(c context.Context, input *user.GetByPhoneNumberInput) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", c, input)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockUserUsecaseMockRecorder) GetByPhoneNumber(c, input any) *MockUserUsecaseGetByPhoneNumberCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockUserUsecase)(nil).GetByPhoneNumber), c, input)
	return &MockUserUsecaseGetByPhoneNumberCall{Call: call}
}

// MockUserUsecaseGetByPhoneNumberCall wrap *gomock.Call
type MockUserUsecaseGetByPhoneNumberCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockUserUsecaseGetByPhoneNumberCall) Return(arg0 *domain.User, arg1 error) *MockUserUsecaseGetByPhoneNumberCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockUserUsecaseGetByPhoneNumberCall) Do(f func(context.Context, *user.GetByPhoneNumberInput) (*domain.User, error)) *MockUserUsecaseGetByPhoneNumberCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockUserUsecaseGetByPhoneNumberCall) DoAndReturn(f func(context.Context, *user.GetByPhoneNumberInput) (*domain.User, error)) *MockUserUsecaseGetByPhoneNumberCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
